Exercise: build a list of all four-digit binary numbers, and compute the corresponding single-digit hexadecimal number.

0001 = 1
0010 = 2
0011 = 3
0100 = 4
0101 = 5 
0110 = 6
0111 = 7
1000 = 8
1001 = 9
1010 = A
1011 = B
1100 = C
1101 = D
1110 = E
1111 = F

Exercise: Pretend we use a naïve floating-point format with 5bit mantissa and 3bit exponent (base-2). What is the smallest possible positive number representable? What is the largest positive number representable? The first bit of each is used for sign:

base-2
[±****][±**]
 ^^^^^  ^^^--- exponent
 |---------- mantissa

smallest possible positive number - 0.001
largest positive number representable - 1111000

Exercise: what is the best approximation of 0.01?

0.01000000000000000020816681711721685132943093776702880859375

Exercise: use diagrams like the above to explain how to delete an item from a linked list.

1. 
---------------       ---------------       ---------------
| x[0] | next |--->-- | x[1] | next |--->---| x[2] | NULL | 
---------------       ---------------       ---------------
2.
---------------       ---------------         ---------------
| x[0] | next |       | x[1] | next |         | x[2] | NULL | 
---------------       ---------------         ---------------
             \_________________________________/
3. x[2] -> x[1]
---------------       ---------------
| x[0] | next |--->---| x[1] | NULL |
---------------       ---------------

Exercise: assemble the numbers 1-10 into binary search trees which are (a) maximally unbalanced to the left, (b) balanced, (c) one step from balanced.

a.
                  1
                 / \
                2
               /
              3
             /
            4
           /
          5
         /
        6
       /
      7
     /     
    8
   /
  9
 /
10

b.

       1
     /   \
    2     6 
   / \   / \
  3  5  7   9
 /    \      \
4      8     10

c.
           1    
         /   \
        2     7 
       / \   / \
      3   6 8   9    
     /           \
    4             10
   /              
  5                 

Exercise: assemble a directed acyclic graph with the numbers 1-12 by strict divisibility: an edge from A to B if B/A is prime. There are no directed cycles, but some nodes do have multiple paths to them. (These form cycles if you ignore the direction.) Which ones? Explain how to decide if a number will have multiple paths to it.

 ____________________________________
|________________________            |
|                        |           |
2--------> 6 -----> 12   |           |
^          ^          ^  |           |
|          |           \ v           |
| /------> 3 ---> 9      4 ---> 8    |
|/                                   v
1 --------> 5 ---------------------> 10
|\ 
| \-----> 7  
v 
11 

6, 12, 10 have mutipal paths because they have several prime divisors

Exercise: Identify several maximal spanning trees in the divisibility graph from the previous exercise.

1 -> 2 -> 4 -> 8
1 -> 3 -> 6 -> 12

Exercise: model acquaintance using a graph (vertices are people, an edge between A and B means A knows B). Model it with a directed graph. How are these different?

Nastya----------Petya
  |               |
Sasha-----------Dasha


Exercise: do the same for files with "cat" and "cat2" instead of "hi" and "hi2"

>> echo cat > testfile; echo cat2 > testfile2

>> md5sum testfile testfile2
54b8617eca0e54c7d3c8e6732c6b687a  testfile
4307ab44204de40235bad8c66cce0ae9  testfile2

>> sha1sum testfile testfile2
8f6abfbac8c81b55f9005f7ec09e32d29e40eb40  testfile
f476b8741936d51309437ffc5c87081c7b24ffb1  testfile2

>> sha512sum testfile testfile2 # sha2, hash size is 512bit
644c7b649d31fc3c432534fb80d71a3a5e2b3eb65e737eb15c6e6af96e40c8ee3dcb55fd172e263783e62f8d94f5c99e12a016d581b860700640e45c9c1b87b3  testfile
84c308d32247eb3b590ff27b47d5018551dd6ad3e696b6d61b1e70fed7570522812a2c3353e93db38728f4a10de5156996b144d2b150f1ffe92ba7a301b5bfe2  testfile2

>> b2sum testfile testfile2 # blake2
0247169dd9d258599e4a4327067f74f3dbd7db0e6d623954212738e62c233b410141a1eab4130073b99a8959e3d52f70da7402ae8d94ca6333126ec3b4e0bca7  testfile
48d92c152ff4c58a948d75f7aaba6ccaf00f8f9beb78e3399fe0f325e758af657c07eb2d83a753f3fe16074b149f46390abce8673c7477f75aae99427c9defa7  testfile2

Exercise: implement the Caesar cipher in python, which advances each letter of 'M' by 'SEC = n': enc(1, "a") = "b", etc.

def caesar_cipher(sec, message):
    a = ord('a')
    alph_size = 26
    result = ''
    for letter in message:
            char = chr((ord(letter) - a + sec) % alph_size + a)
            result += char
    return result
